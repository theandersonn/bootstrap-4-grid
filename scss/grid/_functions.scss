// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
    $prev-key: null;
    $prev-num: null;
    @each $key, $num in $map {
      @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
        // Do nothing
      } @else if not comparable($prev-num, $num) {
        @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
      } @else if $prev-num >= $num {
        @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
      }
      $prev-key: $key;
      $prev-num: $num;
    }
  }
  
  // Starts at zero
  // Used to ensure the min-width of the lowest breakpoint starts at 0.
  @mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
  
  // Internal Bootstrap function to turn maps into its negative variant.
  // It prefixes the keys with `n` and makes the value negative.
  @function negativify-map($map) {
    $result: ();
    @each $key, $value in $map {
      @if $key != 0 {
        $result: map-merge($result, ("n" + $key: (-$value)));
      }
    }
    @return $result;
  }
  
  // Get multiple keys from a sass map
  @function map-get-multiple($map, $values) {
    $result: ();
    @each $key, $value in $map {
      @if (index($values, $key) != null) {
        $result: map-merge($result, ($key: $value));
      }
    }
    @return $result;
  }